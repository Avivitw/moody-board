

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id      Int     @id @default(autoincrement())
  name    String
  email   String  @unique
  emailVerified DateTime? @map(name: "email_verified")

  image   String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]

  moodBoards MoodBoard[]

  @@map(name: "users")
}

model Account {
  id                 String    @id @default(cuid())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  parentId    Int         @default(0)

  parent      Category?   @relation("MainCategories",fields: [parentId], references: [id])
  children    Category[]  @relation("MainCategories")

  moodBoards  MoodBoard[]
  accessories Accessory[]
  
  @@map(name: "categories")
}

model MoodBoard {
  id            Int     @id @default(autoincrement())
  name          String
  userId        Int
  creator       User    @relation(fields: [userId], references: [id])
  
  categories    Category[]
  colors        Color[]
  accessories   Accessory[]   


}

model Color {
  id            Int     @id @default(autoincrement())
  r             Int
  g             Int
  b             Int

  moodBoardId   Int? 
  moodBoard     MoodBoard? @relation(fields: [moodBoardId], references: [id])

  accessoryId   Int?
  accessory     Accessory? @relation(fields: [accessoryId], references: [id])

}


model Accessory {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  image           String?

  categories    Category[]
  moodBoards    MoodBoard[]
  colors        Color[]

}


